@using BlazorApp
@using BlazorApp.Services
@inject AppealCardService AppealCardService

<div class="cards">
    <div class="card">
        @* Use GetValueOrDefault for safety in case the key is missing, though initialization should prevent this *@
        <h2>@(appealCounts.GetValueOrDefault("Total"))</h2>
        <p>Appeals Submitted</p>
    </div>
    <div class="card">
        <h2>@(appealCounts.GetValueOrDefault("Approved"))</h2>
        <p>Appeals Approved</p>
    </div>
    <div class="card">
        <h2>@(appealCounts.GetValueOrDefault("Rejected"))</h2>
        <p>Appeals Denied</p>
    </div>
    <div class="card">
        <h2>@(appealCounts.GetValueOrDefault("Pending"))</h2>
        <p>Appeals Pending</p>
    </div>
</div>

@code {
    // Initialize with all expected keys to avoid runtime errors before data loads
    private Dictionary<string, int> appealCounts = new Dictionary<string, int>
    {
        { "Total", 0 },
        { "Approved", 0 },
        { "Denied", 0 },
        { "Pending", 0 }
    };

    protected override async Task OnInitializedAsync()
    {
        await LoadAppealCounts();
    }

    private async Task LoadAppealCounts()
    {
        try
        {
    // Overwrite the initialized dictionary with data from the service
            var counts = await AppealCardService.GetAppealCountsAsync();
            if (counts != null) // Basic check
            {
                appealCounts = counts;
            }
    // No need to call StateHasChanged() explicitly here if the await yields control
    // and the component re-renders naturally upon completion.
    // However, keeping it is safe if you encounter rendering issues.
            StateHasChanged();
        }
        catch (Exception ex)
        {
    // Log the exception (Good practice)
            Console.WriteLine($"Error loading appeal counts: {ex.Message}");
    // Optionally, set default values or show an error message in the UI
        }
    }
}