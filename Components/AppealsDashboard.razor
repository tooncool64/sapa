@namespace BlazorApp.Components
@using BlazorApp
@using Microsoft.EntityFrameworkCore

<div class="container-fluid p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1 class="fs-2 fw-bold text-primary mb-0">@Title</h1>
        <button class="btn btn-outline-primary rounded-pill" @onclick="RefreshData">
            <i class="oi oi-reload me-1"></i> Refresh
        </button>
    </div>

    @if (loading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading appeals...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card border-0 shadow-sm rounded-3 mb-4">
            <div class="card-body">
                <div class="row g-3 mb-3">
                    <div class="col-md-8">
                        <div class="input-group">
                            <span class="input-group-text bg-white border-end-0">
                                <i class="oi oi-magnifying-glass text-muted"></i>
                            </span>
                            <input type="text" class="form-control border-start-0 ps-0"
                                   placeholder="Search by name, student ID or status"
                                   @bind-value="searchTerm" 
                                   @bind-value:event="oninput" 
                                   @onkeyup="ApplyFilters" />
                        </div>
                    </div>
                    <div class="col-md-4">
                        <select class="form-select rounded-pill" 
                                @bind="statusFilter" 
                                @onchange="() => ApplyFilters()">
                            <option value="">All Statuses</option>
                            <option value="Pending">Pending</option>
                            <option value="Approved">Approved</option>
                            <option value="Rejected">Rejected</option>
                            <option value="More Information Needed">More Information Needed</option>
                        </select>
                    </div>
                </div>

                <div class="d-flex justify-content-between align-items-center mb-3">
                    <span class="text-muted">
                        <strong>@filteredAppeals.Count</strong> appeals found
                    </span>
                    <div class="badge bg-light text-dark rounded-pill px-3 py-2">
                        @if (!string.IsNullOrEmpty(statusFilter))
                        {
                            <span class="me-2">
                                Status: <span class="badge @GetStatusBadgeClass(statusFilter)">@statusFilter</span>
                            </span>
                            <button class="btn btn-sm btn-link text-decoration-none p-0" @onclick="ClearStatusFilter">
                                <i class="oi oi-x"></i>
                            </button>
                        }
                        else
                        {
                            <span>All statuses</span>
                        }
                    </div>
                </div>

                @if (!filteredAppeals.Any())
                {
                    <div class="text-center py-5">
                        <div class="display-1 text-muted mb-3">
                            <i class="oi oi-info"></i>
                        </div>
                        <h4>No appeals found</h4>
                        <p class="text-muted mb-0">Try adjusting your search criteria</p>
                    </div>
                }
                else
                {
                    <div class="table-responsive">
                        <table class="table table-hover align-middle">
                            <thead class="table-light">
                            <tr>
                                <th class="border-0">Name</th>
                                <th class="border-0">Student ID</th>
                                <th class="border-0">Date Submitted</th>
                                <th class="border-0">Status</th>
                                <th class="border-0">Degree Program</th>
                                <th class="border-0 text-end">Actions</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var appeal in filteredAppeals)
                            {
                                <tr>
                                    <td>
                                        <div class="fw-medium">@appeal.Name</div>
                                        <small class="text-muted">@appeal.Email</small>
                                    </td>
                                    <td>@appeal.StudentId</td>
                                    <td>
                                        @if (appeal.Date.HasValue)
                                        {
                                            <div>@appeal.Date?.ToShortDateString()</div>
                                            <small class="text-muted">@appeal.Date?.ToString("h:mm tt")</small>
                                        }
                                        else
                                        {
                                            <span class="text-muted">Not specified</span>
                                        }
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(appeal.Status) rounded-pill px-3 py-2">
                                            @appeal.Status
                                        </span>
                                    </td>
                                    <td>
                                        <div>@appeal.DegreeProgram</div>
                                        <small class="text-muted">@appeal.Major</small>
                                    </td>
                                    <td class="text-end">
                                        <button class="btn btn-primary btn-sm rounded-pill px-3"
                                                @onclick="() => OnAppealSelected.InvokeAsync(appeal.Id)">
                                            <i class="oi oi-eye me-1"></i> View
                                        </button>
                                    </td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {
    [Inject]
    private IDbContextFactory<CosmosContext> ContextFactory { get; set; }

    [Parameter]
    public EventCallback<string> OnAppealSelected { get; set; }

    private bool loading = true;
    private List<AppealForm> appeals = new();
    private List<AppealForm> filteredAppeals = new();
    private string searchTerm = "";
    private string statusFilter = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadAppeals();
    }

    private async Task LoadAppeals()
    {
        try
        {
            loading = true;
            // Create a new context instance
            using var context = await ContextFactory.CreateDbContextAsync();
            appeals = await context.Appeals.ToListAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine($"Error loading appeals: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private void ApplyFilters()
    {
        filteredAppeals = appeals;

        // Apply search term filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            string term = searchTerm.ToLower();
            filteredAppeals = filteredAppeals
                .Where(a => 
                    (a.Name != null && a.Name.ToLower().Contains(term)) || 
                    (a.StudentId != null && a.StudentId.ToLower().Contains(term)) ||
                    (a.Status != null && a.Status.ToLower().Contains(term)) ||
                    (a.Email != null && a.Email.ToLower().Contains(term)) ||
                    (a.Major != null && a.Major.ToLower().Contains(term)) ||
                    (a.DegreeProgram != null && a.DegreeProgram.ToLower().Contains(term)))
                .ToList();
        }

        // Apply status filter
        if (!string.IsNullOrWhiteSpace(statusFilter))
        {
            filteredAppeals = filteredAppeals
                .Where(a => a.Status == statusFilter)
                .ToList();
        }

        // Apply custom filter if provided
        ApplyCustomFilter();
    }

    private void ClearStatusFilter()
    {
        statusFilter = "";
        ApplyFilters();
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            "Pending" => "bg-warning text-dark",
            "More Information Needed" => "bg-info text-dark",
            _ => "bg-secondary"
        };
    }

    [Parameter]
    public string Title { get; set; } = "Appeals Dashboard";

    // Optional parameter to filter appeals by a certain property
    [Parameter]
    public Func<AppealForm, bool> CustomFilter { get; set; }

    // Method to apply custom filtering if provided
    public void ApplyCustomFilter()
    {
        if (CustomFilter != null)
        {
            filteredAppeals = filteredAppeals.Where(CustomFilter).ToList();
        }
    }

    // Public method to refresh the data
    public async Task RefreshData()
    {
        await LoadAppeals();
    }
}

<style>
    .table th {
        font-weight: 600;
        color: #495057;
    }
    
    .table td {
        padding-top: 0.8rem;
        padding-bottom: 0.8rem;
    }
    
    .table tbody tr {
        transition: all 0.2s;
    }
    
    .table tbody tr:hover {
        background-color: rgba(0, 123, 255, 0.04);
    }
</style>