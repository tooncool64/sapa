@page "/admin/appeals/{AppealId}"
@using BlazorApp
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<CosmosContext> ContextFactory
@inject NavigationManager NavManager
@attribute [Authorize(Roles = "Admin")]

<div class="mb-3">
    <button class="btn btn-secondary" @onclick="GoBack">
        <i class="oi oi-arrow-left"></i> Back to Appeals List
    </button>
</div>

@if (loading)
{
    <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (appeal == null)
{
    <div class="alert alert-danger">
        Appeal not found or has been removed.
    </div>
}
else
{
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h2>Appeal Details</h2>
            <div>
                <span class="badge @GetStatusBadgeClass(appeal.Status) me-2">@appeal.Status</span>
            </div>
        </div>
        <div class="card-body">
            <div class="row mb-4">
                <div class="col-md-6">
                    <h3>Student Information</h3>
                    <table class="table table-borderless">
                        <tbody>
                            <tr>
                                <th style="width: 30%">Name:</th>
                                <td>@appeal.Name</td>
                            </tr>
                            <tr>
                                <th>Student ID:</th>
                                <td>@appeal.StudentId</td>
                            </tr>
                            <tr>
                                <th>Email:</th>
                                <td>@appeal.Email</td>
                            </tr>
                            <tr>
                                <th>Date Submitted:</th>
                                <td>@(appeal.Date?.ToShortDateString() ?? "Not specified")</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
                <div class="col-md-6">
                    <h3>Academic Information</h3>
                    <table class="table table-borderless">
                        <tbody>
                            <tr>
                                <th style="width: 30%">Major:</th>
                                <td>@appeal.Major</td>
                            </tr>
                            <tr>
                                <th>Degree Program:</th>
                                <td>@appeal.DegreeProgram</td>
                            </tr>
                            <tr>
                                <th>GPA:</th>
                                <td>@appeal.GPA.ToString("0.00")</td>
                            </tr>
                            <tr>
                                <th>Degree Hours:</th>
                                <td>@appeal.DegreeHours</td>
                            </tr>
                            <tr>
                                <th>Graduation Date:</th>
                                <td>@(appeal.GradDate?.ToShortDateString() ?? "Not specified")</td>
                            </tr>
                            <tr>
                                <th>Change Major:</th>
                                <td>@(appeal.ChangeMajor ? "Yes" : "No")</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <div class="mb-4">
                <h3>Appeal Explanation</h3>
                <div class="card">
                    <div class="card-body">
                        <pre style="white-space: pre-wrap;">@appeal.AppealExplanation</pre>
                    </div>
                </div>
            </div>

            <div class="row mb-4">
                <div class="col-md-6">
                    <h3>Semester 1 Courses</h3>
                    @if (appeal.Semester1Courses.Count == 0)
                    {
                        <p>No courses added for Semester 1.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Course Name</th>
                                        <th>Course #</th>
                                        <th>Hours</th>
                                        <th>Repeat</th>
                                        <th>Required</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var course in appeal.Semester1Courses)
                                    {
                                        <tr>
                                            <td>@course.CourseName</td>
                                            <td>@course.CourseNumber</td>
                                            <td>@course.CreditHours</td>
                                            <td>@(course.IsRepeat ? "Yes" : "No")</td>
                                            <td>@(course.IsRequiredForMajor ? "Yes" : "No")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="col-md-6">
                    <h3>Semester 2 Courses</h3>
                    @if (appeal.Semester2Courses.Count == 0)
                    {
                        <p>No courses added for Semester 2.</p>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-striped">
                                <thead>
                                    <tr>
                                        <th>Course Name</th>
                                        <th>Course #</th>
                                        <th>Hours</th>
                                        <th>Repeat</th>
                                        <th>Required</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var course in appeal.Semester2Courses)
                                    {
                                        <tr>
                                            <td>@course.CourseName</td>
                                            <td>@course.CourseNumber</td>
                                            <td>@course.CreditHours</td>
                                            <td>@(course.IsRepeat ? "Yes" : "No")</td>
                                            <td>@(course.IsRequiredForMajor ? "Yes" : "No")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>

            <div class="mb-4">
                <h3>Acknowledgements</h3>
                <table class="table table-borderless">
                    <tbody>
                        <tr>
                            <th style="width: 50%">Payment Acknowledgement:</th>
                            <td>@(appeal.AcknowledgementPayment ? "Acknowledged" : "Not Acknowledged")</td>
                        </tr>
                        <tr>
                            <th>Final Acknowledgement:</th>
                            <td>@(appeal.AcknowledgementFinal ? "Acknowledged" : "Not Acknowledged")</td>
                        </tr>
                    </tbody>
                </table>
            </div>

            <!-- Status Update Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h3>Update Appeal Status</h3>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="statusSelect" class="form-label">Appeal Status</label>
                        <select id="statusSelect" class="form-select" @bind="newStatus">
                            <option value="Pending">Pending</option>
                            <option value="Approved">Approved</option>
                            <option value="Rejected">Rejected</option>
                            <option value="More Information Needed">More Information Needed</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="statusComment" class="form-label">Status Comment</label>
                        <textarea id="statusComment" class="form-control" rows="3" @bind="newComment" placeholder="Add a comment about this status change"></textarea>
                    </div>
                    <button class="btn btn-primary" @onclick="UpdateAppealStatus" disabled="@(isSaving)">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Update Status</span>
                        }
                    </button>
                </div>
            </div>

            <!-- Add General Comment Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h3>Add Comment</h3>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="generalComment" class="form-label">Comment</label>
                        <textarea id="generalComment" class="form-control" rows="3" @bind="newGeneralComment" placeholder="Add a general comment about this appeal"></textarea>
                    </div>
                    <button class="btn btn-secondary" @onclick="AddGeneralComment" disabled="@(isSaving)">
                        @if (isSaving)
                        {
                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Add Comment</span>
                        }
                    </button>
                </div>
            </div>

            <!-- Comments Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h3>Appeal Comments</h3>
                </div>
                <div class="card-body">
                    @if (appeal.Comments == null || appeal.Comments.Count == 0)
                    {
                        <p>No comments have been added to this appeal.</p>
                    }
                    else
                    {
                        <div class="list-group">
                            @foreach (var comment in appeal.Comments.OrderByDescending(c => c.Timestamp))
                            {
                                <div class="list-group-item list-group-item-action">
                                    <div class="d-flex w-100 justify-content-between">
                                        @if (!string.IsNullOrEmpty(comment.Status))
                                        {
                                            <h5 class="mb-1">Status: <span class="badge @GetStatusBadgeClass(comment.Status)">@comment.Status</span></h5>
                                        }
                                        else
                                        {
                                            <h5 class="mb-1">General Comment</h5>
                                        }
                                        <small>@comment.Timestamp.ToLocalTime().ToString("MMM dd, yyyy h:mm tt")</small>
                                    </div>
                                    <p class="mb-1">@comment.Text</p>
                                    <small>By: @comment.AdminName</small>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string AppealId { get; set; }

    private AppealForm appeal;
    private bool loading = true;
    private bool isSaving = false;
    private string newStatus = "";
    private string newComment = "";
    private string newGeneralComment = ""; // Added for general comments

    protected override async Task OnInitializedAsync()
    {
        await LoadAppeal();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadAppeal();
    }

    private async Task LoadAppeal()
    {
        if (string.IsNullOrEmpty(AppealId))
        {
            return;
        }

        try
        {
            loading = true;
            // Create a context instance using the factory
            await using var context = await ContextFactory.CreateDbContextAsync();
            
            // With Cosmos DB, we don't need to use Include() as nested entities are part of the document
            appeal = await context.Appeals
                .FirstOrDefaultAsync(a => a.Id == AppealId);

            if (appeal != null && string.IsNullOrEmpty(newStatus))
            {
                newStatus = appeal.Status ?? "Pending";
            }
        }
        catch (Exception ex)
        {
            // Log the exception
            Console.WriteLine($"Error loading appeal details: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task UpdateAppealStatus()
    {
        if (appeal == null || string.IsNullOrWhiteSpace(newStatus))
        {
            return;
        }

        try
        {
            isSaving = true;

            await using var context = await ContextFactory.CreateDbContextAsync();
            var appealToUpdate = await context.Appeals
                .FirstOrDefaultAsync(a => a.Id == AppealId);

            if (appealToUpdate != null)
            {
                // Update the appeal status
                appealToUpdate.Status = newStatus;

                // Create a new comment
                if (!string.IsNullOrWhiteSpace(newComment))
                {
                    if (appealToUpdate.Comments == null)
                    {
                        appealToUpdate.Comments = new List<AppealComment>();
                    }

                    var comment = new AppealComment
                    {
                        Id = Guid.NewGuid().ToString(),
                        Text = newComment,
                        Status = newStatus, // Status change comment
                        Timestamp = DateTime.UtcNow,
                        AdminId = "current-admin-id", // Replace with actual admin ID from authentication
                        AdminName = "Admin User" // Replace with actual admin name from authentication
                    };

                    appealToUpdate.Comments.Add(comment);
                }

                await context.SaveChangesAsync();

                // Reload the appeal to get the latest data
                await LoadAppeal();

                // Clear the comment text field
                newComment = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating appeal status: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    // Added method for adding general comments (without status change)
    private async Task AddGeneralComment()
    {
        if (appeal == null || string.IsNullOrWhiteSpace(newGeneralComment))
        {
            return;
        }

        try
        {
            isSaving = true;

            await using var context = await ContextFactory.CreateDbContextAsync();
            var appealToUpdate = await context.Appeals
                .FirstOrDefaultAsync(a => a.Id == AppealId);

            if (appealToUpdate != null)
            {
                if (appealToUpdate.Comments == null)
                {
                    appealToUpdate.Comments = new List<AppealComment>();
                }

                var comment = new AppealComment
                {
                    Id = Guid.NewGuid().ToString(),
                    Text = newGeneralComment,
                    Status = null, // No status change for general comments
                    Timestamp = DateTime.UtcNow,
                    AdminId = "current-admin-id", // Replace with actual admin ID from authentication
                    AdminName = "Admin User" // Replace with actual admin name from authentication
                };

                appealToUpdate.Comments.Add(comment);
                await context.SaveChangesAsync();

                // Reload the appeal to get the latest data
                await LoadAppeal();

                // Clear the general comment text field
                newGeneralComment = "";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding general comment: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void GoBack()
    {
        NavManager.NavigateTo("/admin");
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            "Pending" => "bg-warning",
            "More Information Needed" => "bg-info",
            _ => "bg-secondary"
        };
    }
}