@page "/appeal3"
@inject IAppealFormService FormService
@inject NavigationManager Navigation
@inject IEmailService _emailService

<PageTitle>Academic Plan</PageTitle>

<head>
    <link rel="stylesheet" href="AppealFormPage3.css"/>
</head>
<div class="container">
    <EditForm Model="@_page3Model" FormName="AcademicPlan" OnValidSubmit="@HandleValidSubmit">
        <DataAnnotationsValidator/>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="alert alert-danger" role="alert">
                <i class="fas fa-exclamation-circle"></i>
                <span>@_errorMessage</span>
            </div>
        }

        <section id="academic-info" class="card">
            <div class="card-header">
                <h1>Academic Plan</h1>
            </div>
            
            <div class="card-body">
                <div class="form-row">
                    <div class="form-group">
                        <label id="label-degree-program">
                            <span class="label-text">Degree Program</span>
                            <InputText @bind-Value="_page3Model.DegreeProgram" class="form-control" placeholder="Your degree program..."/>
                            <ValidationMessage For="@(() => _page3Model.DegreeProgram)"/>
                        </label>
                    </div>

                    <div class="form-group">
                        <label id="label-grad-date">
                            <span class="label-text">Expected Graduation Date</span>
                            <InputDate @bind-Value="_page3Model.GradDate" class="form-control"/>
                            <ValidationMessage For="@(() => _page3Model.GradDate)"/>
                        </label>
                    </div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label id="label-gpa">
                            <span class="label-text">Current Cumulative GPA</span>
                            <InputNumber @bind-Value="_page3Model.GPA" class="form-control" placeholder="0.00"/>
                            <ValidationMessage For="@(() => _page3Model.GPA)"/>
                        </label>
                    </div>

                    <div class="form-group">
                        <label id="label-degree-hours">
                            <span class="label-text">Cumulative Degree Hours</span>
                            <InputNumber @bind-Value="_page3Model.DegreeHours" class="form-control" placeholder="0"/>
                            <ValidationMessage For="@(() => _page3Model.DegreeHours)"/>
                        </label>
                    </div>

                    <div class="form-group">
                        <label id="label-change-major">
                            <span class="label-text">Is this a Change of Major?</span>
                            <InputSelect @bind-Value="_page3Model.ChangeMajor" class="form-control">
                                <option value="false">No</option>
                                <option value="true">Yes</option>
                            </InputSelect>
                        </label>
                    </div>
                </div>
            </div>
        </section>

        <section id="semester1" class="card">
            <div class="card-header">
                <h2>Semester 1</h2>
                <p class="subtitle">Please enter your planned courses for the first semester</p>
            </div>
            
            <div class="card-body">
                <div class="table-responsive">
                    <table class="course-table">
                        <thead>
                            <tr>
                                <th>Course Name</th>
                                <th>Course Number</th>
                                <th>Credit Hours</th>
                                <th>Repeat</th>
                                <th>Required for Major</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (var i = 0; i < 6; i++)
                            {
                                var index = i;
                                <tr>
                                    @if (_page3Model.Semester1Courses.Count <= index)
                                    {
                                        _page3Model.Semester1Courses.Add(new SemesterCourseValid());
                                    }
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputText @bind-Value="_page3Model.Semester1Courses[index].CourseName" class="form-control" placeholder="Course name..."/>
                                            <ValidationMessage For="@(() => _page3Model.Semester1Courses[index].CourseName)"/>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputText @bind-Value="_page3Model.Semester1Courses[index].CourseNumber" class="form-control" placeholder="e.g. CS101"/>
                                            <ValidationMessage For="@(() => _page3Model.Semester1Courses[index].CourseNumber)"/>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputNumber @bind-Value="_page3Model.Semester1Courses[index].CreditHours" class="form-control" placeholder="0"/>
                                            <ValidationMessage For="@(() => _page3Model.Semester1Courses[index].CreditHours)"/>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputSelect @bind-Value="_page3Model.Semester1Courses[index].IsRepeat" class="form-control select-sm">
                                                <option value="false">No</option>
                                                <option value="true">Yes</option>
                                            </InputSelect>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputSelect @bind-Value="_page3Model.Semester1Courses[index].IsRequiredForMajor" class="form-control select-sm">
                                                <option value="false">No</option>
                                                <option value="true">Yes</option>
                                            </InputSelect>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <section id="semester2" class="card">
            <div class="card-header">
                <h2>Semester 2</h2>
                <p class="subtitle">Please enter your planned courses for the second semester</p>
            </div>
            
            <div class="card-body">
                <div class="table-responsive">
                    <table class="course-table">
                        <thead>
                            <tr>
                                <th>Course Name</th>
                                <th>Course Number</th>
                                <th>Credit Hours</th>
                                <th>Repeat</th>
                                <th>Required for Major</th>
                            </tr>
                        </thead>
                        <tbody>
                            @for (int i = 0; i < 6; i++)
                            {
                                var index = i;
                                <tr>
                                    @if (_page3Model.Semester2Courses.Count <= index)
                                    {
                                        _page3Model.Semester2Courses.Add(new SemesterCourseValid());
                                    }
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputText @bind-Value="_page3Model.Semester2Courses[index].CourseName" class="form-control" placeholder="Course name..."/>
                                            <ValidationMessage For="@(() => _page3Model.Semester2Courses[index].CourseName)"/>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputText @bind-Value="_page3Model.Semester2Courses[index].CourseNumber" class="form-control" placeholder="e.g. CS101"/>
                                            <ValidationMessage For="@(() => _page3Model.Semester2Courses[index].CourseNumber)"/>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputNumber @bind-Value="_page3Model.Semester2Courses[index].CreditHours" class="form-control" placeholder="0"/>
                                            <ValidationMessage For="@(() => _page3Model.Semester2Courses[index].CreditHours)"/>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputSelect @bind-Value="_page3Model.Semester2Courses[index].IsRepeat" class="form-control select-sm">
                                                <option value="false">No</option>
                                                <option value="true">Yes</option>
                                            </InputSelect>
                                        </div>
                                    </td>
                                    
                                    <td>
                                        <div class="form-group compact">
                                            <InputSelect @bind-Value="_page3Model.Semester2Courses[index].IsRequiredForMajor" class="form-control select-sm">
                                                <option value="false">No</option>
                                                <option value="true">Yes</option>
                                            </InputSelect>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </section>

        <section class="card">
            <div class="card-header">
                <h2>Advisor Information</h2>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="advisorEmail">
                        <span class="label-text">Advisor Email</span>
                        <InputText @bind-Value="_page3Model.AdvisorEmail" class="form-control" placeholder="advisor@stmartin.edu" />
                        <ValidationMessage For="@(() => _page3Model.AdvisorEmail)" />
                    </label>
                </div>
            </div>
        </section>


        <div class="form-actions">
            <button type="submit" class="btn btn-primary" disabled="@_isSubmitting">
                @if (_isSubmitting)
                {
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    <span class="button-text">Submitting...</span>
                }
                else
                {
                    <span class="button-text">Submit Appeal</span>
                }
            </button>
        </div>
    </EditForm>
</div>

@code {
    private AppealFormPart2 _page3Model = new();
    private string _errorMessage = string.Empty;
    private bool _isSubmitting = false;

    protected override void OnInitialized()
    {
        // Copy primitive properties
        _page3Model.DegreeProgram = FormService.CurrentForm.DegreeProgram;
        _page3Model.GradDate = FormService.CurrentForm.GradDate;
        _page3Model.GPA = FormService.CurrentForm.GPA;
        _page3Model.DegreeHours = FormService.CurrentForm.DegreeHours;
        _page3Model.ChangeMajor = FormService.CurrentForm.ChangeMajor;

        // Initialize course lists with at least one empty item if needed
        if (FormService.CurrentForm.Semester1Courses.Count == 0)
        {
            _page3Model.Semester1Courses.Add(new SemesterCourseValid());
        }
        else
        {
            // Convert each SemesterCourse to SemesterCourseValid
            foreach (var course in FormService.CurrentForm.Semester1Courses)
            {
                _page3Model.Semester1Courses.Add(new SemesterCourseValid
                {
                    CourseName = course.CourseName,
                    CourseNumber = course.CourseNumber,
                    CreditHours = course.CreditHours,
                    IsRepeat = course.IsRepeat,
                    IsRequiredForMajor = course.IsRequiredForMajor
                });
            }
        }
        
        if (FormService.CurrentForm.Semester2Courses.Count == 0)
        {
            _page3Model.Semester2Courses.Add(new SemesterCourseValid());
        }
        else
        {
            // Convert each SemesterCourse to SemesterCourseValid
            foreach (var course in FormService.CurrentForm.Semester2Courses)
            {
                _page3Model.Semester2Courses.Add(new SemesterCourseValid
                {
                    CourseName = course.CourseName,
                    CourseNumber = course.CourseNumber,
                    CreditHours = course.CreditHours,
                    IsRepeat = course.IsRepeat,
                    IsRequiredForMajor = course.IsRequiredForMajor
                });
            }
        }
    }

    private async void HandleValidSubmit()
    {
        try
        {
            // Clear any previous error messages
            _errorMessage = string.Empty;
            
            // Set submitting state to show loading indicator
            _isSubmitting = true;
            StateHasChanged();
            
            FormService.UpdateForm(form =>
            {
                form.DegreeProgram = _page3Model.DegreeProgram;
                form.GradDate = _page3Model.GradDate;
                form.GPA = _page3Model.GPA;
                form.DegreeHours = _page3Model.DegreeHours;
                form.ChangeMajor = _page3Model.ChangeMajor;
                form.AdvisorEmail = _page3Model.AdvisorEmail;


                // Convert SemesterCourseValid objects back to SemesterCourse objects
                form.Semester1Courses = _page3Model.Semester1Courses.Select(vc => new SemesterCourse
                {
                    CourseName = vc.CourseName,
                    CourseNumber = vc.CourseNumber,
                    CreditHours = vc.CreditHours,
                    IsRepeat = vc.IsRepeat,
                    IsRequiredForMajor = vc.IsRequiredForMajor
                }).ToList();

                form.Semester2Courses = _page3Model.Semester2Courses.Select(vc => new SemesterCourse
                {
                    CourseName = vc.CourseName,
                    CourseNumber = vc.CourseNumber,
                    CreditHours = vc.CreditHours,
                    IsRepeat = vc.IsRepeat,
                    IsRequiredForMajor = vc.IsRequiredForMajor
                }).ToList();
            });
        
            // At this point, the FormService.CurrentForm contains all the data from all pages
            var success = await FormService.SubmitFormAsync();

            if (success)
            {
                string advisorEmail = _page3Model.AdvisorEmail;

                if (!string.IsNullOrEmpty(advisorEmail) && advisorEmail.EndsWith("@stmartin.edu"))
                {
                    // Generate the advisor approval link
                    string advisorLink = $"https://sap-app-e2hbhkhuabe3hjd8.westus-01.azurewebsites.net/advisor?id={FormService.CurrentForm.Id}";

                    // Create email subject and body
                    string subject = "Student Academic Plan Approval Needed";
                    string body = $@"
                        <p>Dear Advisor,</p>
                        <p>A student has submitted an academic plan that requires your review.</p>
                        <p><strong>Student Name:</strong> {FormService.CurrentForm.Name}</p>
                        <p><strong>Student ID:</strong> {FormService.CurrentForm.StudentId}</p>
                        <p>Please click the link below to review and approve/reject the plan:</p>
                        <p><a href='{advisorLink}'>View Academic Plan</a></p>
                        <p>Thank you.</p>";

                    // Send email (You need to inject IEmailService at the top first)
                    await _emailService.SendEmailAsync(advisorEmail, subject, body);
                }

                // Reset the form for future use
                FormService.ResetForm();

                // Navigate to a confirmation page
                Navigation.NavigateTo("/confirmation");
            }
            else
            {
                // Display the error message on the page
                _errorMessage = FormService.GetLastErrorMessage() ?? "An unexpected error occurred while submitting your appeal. Please try again later.";
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            // Handle any unexpected exceptions
            _errorMessage = $"An error occurred: {ex.Message}";
            StateHasChanged();
        }
        finally
        {
            // Reset submitting state
            _isSubmitting = false;
            StateHasChanged();
        }
    }
}