@page "/advisor"
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject IDbContextFactory<CosmosContext> DbFactory

<PageTitle>Advisor Dashboard</PageTitle>

@if (isLoading)
{
    <p>Loading student academic plan...</p>
}
else if (isError)
{
    <p style="color:red;">Error loading the academic plan.</p>
}
else if (form != null)
{
    <div class="card p-4 shadow-sm">
        <h2>Academic Plan</h2>
        <p><strong>Degree Program:</strong> @form.DegreeProgram</p>
        <p><strong>Expected Graduation Date:</strong> @form.GradDate?.ToShortDateString()</p>
        <p><strong>Current GPA:</strong> @form.GPA</p>
        <p><strong>Cumulative Degree Hours:</strong> @form.DegreeHours</p>

        <h5>Semester 1 Courses</h5>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Course Number</th>
                        <th>Course Name</th>
                        <th>Credit Hours</th>
                        <th>Repeat</th>
                        <th>Required for Major</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var course in form.Semester1Courses)
                    {
                        <tr>
                            <td>@course.CourseNumber</td>
                            <td>@course.CourseName</td>
                            <td>@course.CreditHours</td>
                            <td>@(course.IsRepeat ? "Yes" : "No")</td>
                            <td>@(course.IsRequiredForMajor ? "Yes" : "No")</td>
                        </tr>
                    }
                </tbody>
            </table>

            <h5>Semester 2 Courses</h5>
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Course Number</th>
                            <th>Course Name</th>
                            <th>Credit Hours</th>
                            <th>Repeat</th>
                            <th>Required for Major</th>
                            </tr>
                    </thead>
                    <tbody>
                        @foreach (var course in form.Semester2Courses)
                        {
                            <tr>
                                <td>@course.CourseNumber</td>
                                <td>@course.CourseName</td>
                                <td>@course.CreditHours</td>
                                <td>@(course.IsRepeat ? "Yes" : "No")</td>
                                <td>@(course.IsRequiredForMajor ? "Yes" : "No")</td>
                            </tr>
                        }
                    </tbody>
                </table>
        <div class="mt-4">
            <button class="btn btn-success me-2" @onclick="ApprovePlan">Approve</button>
            <button class="btn btn-danger" @onclick="RejectPlan">Reject</button>
        </div>
    </div>
}
else
{
    <p>No academic plan available for review.</p>
}

@code {
    private CosmosContext _dbContext;
    private AppealForm? form;
    private bool isLoading = true;
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _dbContext = await DbFactory.CreateDbContextAsync();
            form = await _dbContext.Appeals.FirstOrDefaultAsync();

            if (form == null)
            {
                Console.WriteLine("No Appeal found with a DegreeProgram filled.");
                isError = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading academic plan: {ex.Message}");
            isError = true;
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApprovePlan()
    {
        if (form != null)
        {
            form.AdvisorApprovalStatus = "Approved";
            await _dbContext.SaveChangesAsync();
            Navigation.NavigateTo("/advisor-thankyou");
        }
    }

    private async Task RejectPlan()
    {
        if (form != null)
        {
            form.AdvisorApprovalStatus = "Rejected";
            await _dbContext.SaveChangesAsync();
            Navigation.NavigateTo("/advisor-thankyou");
        }
    }
}


