@page "/advisor"
@using Microsoft.EntityFrameworkCore
@inject NavigationManager NavManager
@inject IDbContextFactory<CosmosContext> DbFactory


<PageTitle>Advisor Dashboard</PageTitle>

<h3>Advisor Page</h3>

<!-- Loading state -->
@if (isLoading)
{
    <p>Loading student information...</p>
}
<!-- Error state -->
else if (isError)
{
    <p style="color:red;">Error loading academic plan.</p>
}
<!-- If form is successfully loaded -->
else if (form != null)
{
    <div class="card">
        <h4>Student Academic Plan</h4>
        <p><strong>Student Name:</strong> @form.Name</p>
        <p><strong>Student ID:</strong> @form.StudentId</p>
        <p><strong>Degree Program:</strong> @form.DegreeProgram</p>
        <p><strong>Expected Graduation:</strong> @form.GradDate?.ToShortDateString()</p>
        <p><strong>Current GPA:</strong> @form.GPA</p>

        <!-- Semester 1 Courses -->
        <h5>Semester 1 Courses</h5>
        <ul>
            @foreach (var course in form.Semester1Courses)
            {
                <li>@course.CourseNumber - @course.CourseName (@course.CreditHours credits)</li>
            }
        </ul>

        <!-- Semester 2 Courses -->
        <h5>Semester 2 Courses</h5>
        <ul>
            @foreach (var course in form.Semester2Courses)
            {
                <li>@course.CourseNumber - @course.CourseName (@course.CreditHours credits)</li>
            }
        </ul>

        <!-- Approve and Reject buttons -->
        <div class="approval-buttons" style="margin-top:20px;">
            <button class="btn btn-success" @onclick="ApprovePlan">Approve</button>
            <button class="btn btn-danger" @onclick="RejectPlan">Reject</button>
        </div>
    </div>
}
<!-- If no ID was provided in URL -->
else
{
    <p>No student plan to review. Please check the link provided in your email.</p>
}

@code {
    [Parameter]
    public string id { get; set; } = string.Empty; // <-- capture id from the URL

    private CosmosContext _dbContext;
    private AppealForm? form;
    private bool isLoading = true;
    private bool isError = false;
    private bool hasSubmitted = false;

    protected override async Task OnInitializedAsync()
    {
        _dbContext = await DbFactory.CreateDbContextAsync();

        if (!string.IsNullOrEmpty(id))
        {
            try
            {
                form = await _dbContext.Appeals.FindAsync(id);
                if (form == null)
                {
                    isError = true;
                }
                isLoading = false;
            }
            catch
            {
                isError = true;
                isLoading = false;
            }
        }
        else
        {
            isError = true;
            isLoading = false;
        }
    }

    private async Task ApprovePlan()
    {
        if (form != null)
        {
            form.AdvisorApprovalStatus = "Approved";
            await _dbContext.SaveChangesAsync();
            hasSubmitted = true;
            Navigation.NavigateTo("/advisor-thankyou");
        }
    }

    private async Task RejectPlan()
    {
        if (form != null)
        {
            form.AdvisorApprovalStatus = "Rejected";
            await _dbContext.SaveChangesAsync();
            hasSubmitted = true;
            Navigation.NavigateTo("/advisor-thankyou");
        }
    }
}
