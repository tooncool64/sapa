@page "/appeal"
@inject IAppealFormService FormService
@inject NavigationManager Navigation


<PageTitle>Appeal Form</PageTitle>

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="AppealFormPage1.css"/>
    <script src="AppealFormPage1.js"></script>
</head>
<body>
<div class="container">
    <header>
        <button id="toggle-button" class="lang-toggle" onclick="toggleLanguage()">Español</button>
    </header>
    <main>
        <EditForm Model="@FormService.CurrentForm" FormName="AppealForm1" OnValidSubmit="@HandleValidSubmit">
            <DataAnnotationsValidator/>

            <section id="student-info" class="card">
                <h2 id="student-info-heading">Student Information</h2>
                <div class="form-group">
                    <label id="label-name">
                        <span class="label-text">Name:</span>
                        <InputText @bind-Value="FormService.CurrentForm.Name" class="form-control" placeholder="Your name.."/>
                        <ValidationMessage For="@(() => FormService.CurrentForm.Name)"/>
                    </label>
                </div>

                <div class="form-group">
                    <label id="label-student-id">
                        <span class="label-text">Student ID#:</span>
                        <InputText @bind-Value="FormService.CurrentForm.StudentId" class="form-control" placeholder="ex: p000.."/>
                        <ValidationMessage For="@(() => FormService.CurrentForm.StudentId)"/>
                    </label>
                </div>

                <div class="form-group">
                    <label id="label-date">
                        <span class="label-text">Date:</span>
                        <InputDate @bind-Value="FormService.CurrentForm.Date" class="form-control"/>
                        <ValidationMessage For="@(() => FormService.CurrentForm.Date)"/>
                    </label>
                </div>

                <div class="form-group">
                    <label id="email-name">
                        <span class="email-name">Email:</span>
                        <InputText @bind-Value="FormService.CurrentForm.Email" class="form-control"/>
                        <ValidationMessage For="@(() => FormService.CurrentForm.Email)"/>
                    </label>
                </div>

                <div class="form-group">
                    <label id="label-major">
                        <span class="label-text">Major:</span>
                        <InputText @bind-Value="FormService.CurrentForm.Major" class="form-control" placeholder="Your major.."/>
                        <ValidationMessage For="@(() => FormService.CurrentForm.Major)"/>
                    </label>
                </div>
            </section>

            <section id="appeal-details" class="card">
                <h2 id="appeal-details-heading">Appeal Explanation</h2>
                <p id="appeal-details-text">
                    Please provide a signed, typed, or written statement (max 500 words) explaining:
                </p>
                <ol id="appeal-details-list">
                    <li id = "appeal-list-1">Any extenuating circumstances that led to your SAP status.</li>
                    <li id = "appeal-list-2">How these circumstances affected your academic progress.</li>
                    <li id = "appeal-list-3">Steps you have taken to overcome them.</li>
                    <li id = "appeal-list-4">Your plan for future academic success.</li>
                </ol>
               <div class="form-group">
                                   <InputTextArea @bind-Value="FormService.CurrentForm.AppealExplanation"
                                                  class="form-control"
                                                  id="text-area"
                                                  rows="6"
                                                  placeholder="Write your explanation here..."
                                                  @onkeyup="UpdateWordCount"/>
                                   <div class="word-count @(isOverLimit ? "text-danger" : "text-muted")">
                                       @wordCountMessage
                                   </div>
                                   <ValidationMessage For="@(() => FormService.CurrentForm.AppealExplanation)"/>
                   </div>
            </section>

 <section class="card" id="acknowledgements-section">
                <h2 id="acknowledgements-heading">Acknowledgements</h2>
                <div class="checkbox-container">
                    <InputCheckbox @bind-Value="FormService.CurrentForm.AcknowledgementPayment" id="checkbox1" />
                    <span id="checkbox1-text">
                        Payment arrangement: I understand the Office of Financial Aid will NOT hold my classes pending a decision by the SAP committee if I am unable to pay any balance on the account.
                    </span>
                </div>
                
                <div class="checkbox-container">
                    <InputCheckbox @bind-Value="FormService.CurrentForm.AcknowledgementFinal" id="checkbox2" />
                    <span id="checkbox2-text">
                        I understand that the decision of the Office of Financial Aid is final.
                    </span>
                </div>
            </section>
            
            <div class="form-actions mt-3">
                <button type="submit" id="submit-button" class="btn btn-primary">Next</button>
            </div>
        </EditForm>
    </main>
</div>
<div class="card">
    <NavLink href="/appeal2"><button>Next Page</button></NavLink>
</div>
</body>
</html>

@code {
    private void HandleValidSubmit()
    {
        // Check if the explanation is over the word limit
        UpdateWordCount();
        
        if (!isOverLimit)
        {
            // Only navigate if the word count is within the limit
            Navigation.NavigateTo("/appeal2");
        }
        // If over limit, the form won't submit due to the error message being displayed
    }
    
    private int maxWords = 500;
    private int currentWordCount = 0;
    private string wordCountMessage = "";
    private bool isOverLimit = false;

    private void UpdateWordCount()
    {
        if (string.IsNullOrWhiteSpace(FormService.CurrentForm.AppealExplanation))
        {
            currentWordCount = 0;
        }
        else
        {
            // Count words by splitting on whitespace and filtering out empty entries
            var words = FormService.CurrentForm.AppealExplanation
                .Split(new[] { ' ', '\t', '\n', '\r' }, StringSplitOptions.RemoveEmptyEntries);
            currentWordCount = words.Length;
        }

        // Update word count message
        isOverLimit = currentWordCount > maxWords;
        
        wordCountMessage = isOverLimit ? $"Word count: {currentWordCount}/{maxWords} - Please limit your explanation to {maxWords} words." : $"Word count: {currentWordCount}/{maxWords}";
        
        StateHasChanged();
    }
}