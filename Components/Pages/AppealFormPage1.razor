@page "/appeal"
@inject IAppealFormService FormService
@inject IAppealClosingDateService ClosingDateService
@inject NavigationManager Navigation

<PageTitle>Appeal Form</PageTitle>

@if (_loading)
{
    <div class="container">
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    </div>
}
else if (!_isAppealPeriodOpen)
{
    <div class="container">
        <div class="alert alert-warning">
            <h2>Appeal Period Closed</h2>
            <p>We're sorry, but the appeal submission period has ended on @_closingDate?.ToString("MMMM dd, yyyy").</p>
            <p>Please contact the Financial Aid Office for more information.</p>
        </div>
    </div>
}
else
{
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <link rel="stylesheet" href="AppealFormPage1.css"/>
        <script src="AppealFormPage1.js"></script>
    </head>
    <body>
    <div class="container">
        <header>
            <button id="toggle-button" class="lang-toggle" onclick="toggleLanguage()">Español</button>
        </header>
        <main>
            <EditForm Model="@_page1Model" FormName="AppealForm1" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator/>

                <!-- Rest of your existing form HTML -->
                
            </EditForm>
        </main>
    </div>
    </body>
    </html>
}

@code {
    private AppealFormPart1 _page1Model = new();
    private bool _loading = true;
    private bool _isAppealPeriodOpen;
    private DateTime? _closingDate;
    
    protected override async Task OnInitializedAsync()
    {
        _isAppealPeriodOpen = await ClosingDateService.IsAppealPeriodOpenAsync();
        _closingDate = await ClosingDateService.GetClosingDateAsync();
        
        if (_isAppealPeriodOpen)
        {
            _page1Model.Name = FormService.CurrentForm.Name;
            _page1Model.StudentId = FormService.CurrentForm.StudentId;
            _page1Model.Date = FormService.CurrentForm.Date;
            _page1Model.Email = FormService.CurrentForm.Email;
            _page1Model.Major = FormService.CurrentForm.Major;
            _page1Model.AppealExplanation = FormService.CurrentForm.AppealExplanation;
            _page1Model.AcknowledgementPayment = FormService.CurrentForm.AcknowledgementPayment;
            _page1Model.AcknowledgementFinal = FormService.CurrentForm.AcknowledgementFinal;
        }
        
        _loading = false;
    }
    
    private async Task HandleValidSubmit()
    {
        // Re-check in case the period closed while user was filling the form
        if (!await ClosingDateService.IsAppealPeriodOpenAsync())
        {
            _isAppealPeriodOpen = false;
            _closingDate = await ClosingDateService.GetClosingDateAsync();
            StateHasChanged();
            return;
        }
        
        FormService.UpdateForm(form => {
                                       form.Name = _page1Model.Name;
                                       form.StudentId = _page1Model.StudentId;
                                       form.Date = _page1Model.Date;
                                       form.Email = _page1Model.Email;
                                       form.Major = _page1Model.Major;
                                       form.AppealExplanation = _page1Model.AppealExplanation;
                                       form.AcknowledgementPayment = _page1Model.AcknowledgementPayment;
                                       form.AcknowledgementFinal = _page1Model.AcknowledgementFinal;
        });
        
        Navigation.NavigateTo("/appeal2");
    }
}