@page "/appeal2"
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<PageTitle>Appeal Documentation</PageTitle>

<!DOCTYPE html>
<html lang="en">
<head>
    <link rel="stylesheet" href="AppealFormPage2.css"/>
    <script src="AppealFormPage2.js"></script>
</head>
<body>
<div class="container">
    <h1 id="page-title">Reasons & Supporting Documentation for SAP Appeal</h1>

    <div class="card">
        <h2 id="reason-1-title">1. Personal Illness or Injury (Physical and Mental Health)</h2>
        <div class="subpoints">
            <p id="reason-1a">a. A detailed explanation of the medical circumstances including the date.</p>
            <p id="reason-1b">b. Supporting documentation.</p>
            <p id="reason-1c">c. Documentation regarding what steps you've taken.</p>
        </div>
    </div>

    <div class="card">
        <h2 id="reason-2-title">2. Illness of a Family Member</h2>
        <div class="subpoints">
            <p id="reason-2a">a. A detailed explanation of the medical circumstances of the family member.</p>
            <p id="reason-2b">b. Supporting documentation.</p>
            <p id="reason-2c">c. Documentation regarding what steps you've taken.</p>
        </div>
    </div>

    <div class="card">
        <h2 id="reason-3-title">Death of a Family Member/ Roommate/ Close Friend</h2>
        <div class="subpoints">
            <p id="reason-3a">a. A detailed statement including the name of the deceased and their relationship.</p>
            <p id="reason-3b">b. Supporting documentation.</p>
            <p id="reason-3c">c. Documentation demonstrating your ability to return to classes.</p>
        </div>
    </div>

    <div class="card">
        <h2 id="reason-4-title">Personal Crisis</h2>
        <div class="subpoints">
            <p id="reason-4a">a. A detailed explanation of the crisis including the date of occurrence, duration, and impact on coursework.</p>
            <p id="reason-4b">b. Supporting documentation.</p>
            <p id="reason-4c">c. Documentation regarding what steps you've taken to resolve the crisis.</p>
        </div>
    </div>

    <div class="card">
        <h2 id="reason-5-title">Other Circumstances Beyond Your Control</h2>
        <div class="subpoints">
            <p id="reason-5a">a. Provide documentation of extenuating circumstances beyond your control.</p>
            <p id="reason-5b">b. Documentation supporting that your circumstances have either been resolved or are being managed.</p>
        </div>
    </div>

    <div class="card">
        <h2 id="reason-6-title">Exceeded Maximum Hours for Degree Completion</h2>
        <div class="subpoints">
            <p id="reason-6a">a. A detailed explanation for exceeding the maximum hours required.</p>
            <p id="reason-6b">b. A prescribed academic plan of work from an academic advisor.</p>
        </div>
    </div>

     <div class="card">
            <h2 id="required-documents-title">Required Supporting Documents</h2>
            <p id="required-documents-text">Supporting documentation can be submitted below.</p>
            <div class="subpoints">
                <p id="medical-condition"><strong>Medical Condition:</strong> Submit a letter from your health care provider stating whether you are well enough to return.</p>
                <p id="medical-note" class="note">**Do NOT send us your medical records.**</p>
                <p id="maximum-time-frame"><strong>Maximum Time Frame:</strong> Submit documentation from your academic advisor confirming your graduation date.</p>
                <p id="double-majors"><strong>Double Majors:</strong> If you are seeking two majors, documentation must come from BOTH advisors.</p>
                <p id="other-reasons"><strong>Other:</strong> Submit documentation that proves each factor as noted as influencing your academics.</p>
            </div>
        </div>
    
        <div class="card">
            <h2 id="important-info-title">Important Information</h2>
            <p id="deadline-note" class="note">**DEADLINE** - YOUR appeal must be submitted prior to the mid-point of the term.</p>
            <p id="mid-semester-warning">If your appeal is not received by mid-semester, it will not be reviewed, and you are responsible for paying your balance with out-of-pocket funds.</p>
            <p id="additional-info">The Office of Financial Aid may require additional information.</p>
            <p id="processing-warning">The Office of Financial Aid staff will not continue processing your appeal until the requested information has been received.</p>
            <p id="contact-info">Contact the Office of Financial Aid for further assistance at <strong>finaid@stmartin.edu</strong></p>
        </div>
    
    <div class="documentation">
        <label id="documentation-label">
            <span class="label-text">
                Official documentation supporting your extenuating circumstance(s):
            </span>
        </label>
        <p id="documentation-description">
            The only acceptable forms of documentation are PDF and Word.
        </p>
    </div>

    <div class="file-upload-container">
        <div class="file-input-wrapper">
            @foreach (var inputFileId in inputFileIds)
            {
                <InputFile OnChange="@(e => HandleFileSelection(e, inputFileId))" 
                    multiple 
                    accept=".pdf, .docx" 
                    id="@inputFileId" 
                    style="display: none;" />
            }
            
            <button @onclick="AddNewFiles" class="file-select-btn">
                Select PDF or Word documents
            </button>
            
            @if (fileInfos.Count > 0)
            {
                <div class="selected-files">
                    @foreach (var fileInfo in fileInfos)
                    {
                        <div class="file-thumbnail">
                            <button class="remove-file" @onclick="() => RemoveFile(fileInfo)">×</button>
                            <div class="file-icon">
                                @if (fileInfo.FileName.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase))
                                {
                                    <span>📄</span>
                                }
                                else if (fileInfo.FileName.EndsWith(".docx", StringComparison.OrdinalIgnoreCase))
                                {
                                    <span>📝</span>
                                }
                            </div>
                            <div class="file-name">@fileInfo.FileName</div>
                        </div>
                    }
                </div>
                <button class="upload-btn" @onclick="UploadSelectedFiles" disabled="@isUploading">
                    @if (isUploading)
                    {
                        <span>Uploading...</span>
                    }
                    else
                    {
                        <span>Upload Selected Files</span>
                    }
                </button>
            }
        </div>
    </div>

    <div class="card">
        <p id="final-note"><strong>Note:</strong> Appeals submitted for reasons above will be reviewed on a case-by-case basis. Appeals are not automatically approved for any of the above reasons but are reviewed based on circumstances, documented academic history, and academic success potential.</p>
    </div>

    <!-- Language Toggle Button -->
    <button id="toggle-button" class="lang-toggle" onclick="toggleLanguage()">Español</button>

    <!--Test Div -->
    <div class="mt-3">
        @if (_uploadStatus != null)
        {
            <div class="@(_uploadStatus.Success ? "text-success" : "text-danger")">
                @_uploadStatus.Message
            </div>
        }
    </div>

    <div class="card">
        <NavLink href="/appeal3"><button>Next Page</button></NavLink>
    </div>
</div>
</body>
</html>

@code {
    private UploadStatus? _uploadStatus;
    private bool isUploading = false;
    private int nextInputId = 0;
    private List<string> inputFileIds = new List<string>();
    private List<FileInfo> fileInfos = new List<FileInfo>();
    
    private class FileInfo
    {
        public string InputId { get; set; } = "";
        public string FileName { get; set; } = "";
        public IBrowserFile File { get; set; } = null!;
    }

    protected override void OnInitialized()
    {
        // Create initial input
        inputFileIds.Add($"file-input-{nextInputId++}");
    }

    private class UploadStatus
    {
        public bool Success { get; set; }
        public string Message { get; set; } = "";
    }

    private void AddNewFiles()
    {
        // Generate a new unique ID for the input
        string newInputId = $"file-input-{nextInputId++}";
        inputFileIds.Add(newInputId);
        
        // Force UI to update first
        StateHasChanged();
        
        // Then trigger click on the new input
        InvokeAsync(async () => 
        {
            await Task.Delay(10); // Small delay to ensure DOM is updated
            await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('{newInputId}').click()");
        });
    }

    private void HandleFileSelection(InputFileChangeEventArgs e, string inputId)
    {
        foreach (var file in e.GetMultipleFiles())
        {
            // Check if file type is .pdf or .docx
            if (file.Name.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase) || 
                file.Name.EndsWith(".docx", StringComparison.OrdinalIgnoreCase))
            {
                // Check for duplicate file names
                if (!fileInfos.Any(f => f.FileName == file.Name))
                {
                    fileInfos.Add(new FileInfo 
                    { 
                        InputId = inputId,
                        FileName = file.Name,
                        File = file
                    });
                }
                else
                {
                    _uploadStatus = new UploadStatus
                    {
                        Success = false,
                        Message = $"File with name '{file.Name}' is already selected."
                    };
                }
            }
            else
            {
                _uploadStatus = new UploadStatus
                {
                    Success = false,
                    Message = $"Invalid file type: {file.Name}. Only PDF and Word documents are accepted."
                };
            }
        }
        
        StateHasChanged();
    }

    private void RemoveFile(FileInfo fileInfo)
    {
        fileInfos.Remove(fileInfo);
        
        if (fileInfos.Count == 0)
        {
            _uploadStatus = null;
        }
        
        StateHasChanged();
    }

    private async Task UploadSelectedFiles()
    {
        if (fileInfos.Count == 0) return;

        try
        {
            isUploading = true;
            _uploadStatus = null;
            StateHasChanged();

            List<FileInfo> successfullyUploaded = new List<FileInfo>();

            foreach (var fileInfo in fileInfos.ToList())
            {
                try
                {
                    var content = new MultipartFormDataContent();
                    var stream = fileInfo.File.OpenReadStream(10_000_000);
                    var streamContent = new StreamContent(stream);
                    content.Add(streamContent, "file", fileInfo.FileName);

                    var response = await Http.PostAsync(
                        "https://sap-app-e2hbhkhuabe3hjd8.westus-01.azurewebsites.net/api/upload",
                        content);

                    var responseContent = await response.Content.ReadAsStringAsync();

                    if (!response.IsSuccessStatusCode)
                    {
                        throw new Exception($"Upload failed: {response.StatusCode} - {responseContent}");
                    }

                    _uploadStatus = new UploadStatus
                    {
                        Success = true,
                        Message = $"Successfully uploaded {fileInfo.FileName}"
                    };
                    
                    // Track successfully uploaded files
                    successfullyUploaded.Add(fileInfo);
                }
                catch (Exception ex)
                {
                    _uploadStatus = new UploadStatus
                    {
                        Success = false,
                        Message = $"Failed to upload {fileInfo.FileName}: {ex.Message}"
                    };
                }
                finally
                {
                    StateHasChanged();
                }
            }
            
            // Remove only the successfully uploaded files
            foreach (var fileInfo in successfullyUploaded)
            {
                fileInfos.Remove(fileInfo);
            }
        }
        catch (Exception ex)
        {
            _uploadStatus = new UploadStatus
            {
                Success = false,
                Message = $"Error processing files: {ex.Message}"
            };
        }
        finally
        {
            isUploading = false;
            StateHasChanged();
        }
    }
}