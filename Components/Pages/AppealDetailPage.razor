@page "/admin/appeals/{AppealId}"
@using BlazorApp
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<CosmosContext> ContextFactory
@inject NavigationManager NavManager
<!--- "at"attribute [Authorize(Roles = "Admin")] --->


<div class="container-fluid p-4">
    <div class="d-flex align-items-center mb-4">
        <button class="btn btn-outline-secondary rounded-pill shadow-sm me-3" @onclick="GoBack">
            <i class="oi oi-arrow-left me-1"></i> Back
        </button>
        <h2 class="mb-0 flex-grow-1">Appeal Management</h2>
    </div>

    @if (loading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (appeal == null)
    {
        <div class="alert alert-danger shadow-sm rounded-3">
            <i class="oi oi-warning me-2"></i> Appeal not found or has been removed.
        </div>
    }
    else
    {
        <div class="row">
            <!-- Left column -->
            <div class="col-lg-8">
                <div class="card shadow-sm rounded-3 mb-4 border-0">
                    <div class="card-header bg-white d-flex justify-content-between align-items-center py-3">
                        <h3 class="mb-0 fs-4">Appeal Details</h3>
                        <span class="badge @GetStatusBadgeClass(appeal.Status) rounded-pill px-3 py-2">@appeal.Status</span>
                    </div>
                    <div class="card-body">
                        <div class="row g-4">
                            <!-- Student Info Card -->
                            <div class="col-md-6">
                                <div class="card h-100 border-0 bg-light rounded-3">
                                    <div class="card-body">
                                        <h4 class="fs-5 mb-3 d-flex align-items-center">
                                            <i class="oi oi-person me-2 text-primary"></i> Student Information
                                        </h4>
                                        <div class="mb-3">
                                            <label class="text-muted small mb-1">Name</label>
                                            <p class="fw-medium mb-2">@appeal.Name</p>
                                        </div>
                                        <div class="mb-3">
                                            <label class="text-muted small mb-1">Student ID</label>
                                            <p class="fw-medium mb-2">@appeal.StudentId</p>
                                        </div>
                                        <div class="mb-3">
                                            <label class="text-muted small mb-1">Email</label>
                                            <p class="fw-medium mb-2">@appeal.Email</p>
                                        </div>
                                        <div>
                                            <label class="text-muted small mb-1">Date Submitted</label>
                                            <p class="fw-medium mb-0">@(appeal.Date?.ToShortDateString() ?? "Not specified")</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Academic Info Card -->
                            <div class="col-md-6">
                                <div class="card h-100 border-0 bg-light rounded-3">
                                    <div class="card-body">
                                        <h4 class="fs-5 mb-3 d-flex align-items-center">
                                            <i class="oi oi-book me-2 text-primary"></i> Academic Information
                                        </h4>
                                        <div class="row">
                                            <div class="col-6 mb-3">
                                                <label class="text-muted small mb-1">Major</label>
                                                <p class="fw-medium mb-0">@appeal.Major</p>
                                            </div>
                                            <div class="col-6 mb-3">
                                                <label class="text-muted small mb-1">Degree Program</label>
                                                <p class="fw-medium mb-0">@appeal.DegreeProgram</p>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6 mb-3">
                                                <label class="text-muted small mb-1">GPA</label>
                                                <p class="fw-medium mb-0">@appeal.GPA.ToString("0.00")</p>
                                            </div>
                                            <div class="col-6 mb-3">
                                                <label class="text-muted small mb-1">Degree Hours</label>
                                                <p class="fw-medium mb-0">@appeal.DegreeHours</p>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-6 mb-3">
                                                <label class="text-muted small mb-1">Graduation Date</label>
                                                <p class="fw-medium mb-0">@(appeal.GradDate?.ToShortDateString() ?? "Not specified")</p>
                                            </div>
                                            <div class="col-6 mb-3">
                                                <label class="text-muted small mb-1">Change Major</label>
                                                <p class="fw-medium mb-0">@(appeal.ChangeMajor ? "Yes" : "No")</p>
                                            </div>
                                        </div>
                                        <div class="row">
                                            <div class="col-12 mb-3">
                                                <label class="text-muted small mb-1">Advisor Review Status</label>
                                                    <div class="d-flex align-items-center">
                                                        @if (!string.IsNullOrWhiteSpace(appeal.AdvisorApprovalStatus))
                                                        {
                                                            <span class="status-dot me-2 @GetAdvisorStatusDotClass(appeal.AdvisorApprovalStatus)"></span>
                                                            <p class="fw-medium mb-0">@appeal.AdvisorApprovalStatus</p>
                                                        }
                                                        else
                                                        {
                                                            <span class="status-dot me-2 bg-warning"></span>
                                                            <p class="text-muted mb-0">Pending</p>
                                                        }
                                                    </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>
                            
                            <!-- Explanation Card -->
                            <div class="col-12">
                                <div class="card border-0 bg-light rounded-3">
                                    <div class="card-body">
                                        <h4 class="fs-5 mb-3 d-flex align-items-center">
                                            <i class="oi oi-document me-2 text-primary"></i> Appeal Explanation
                                        </h4>
                                        <div class="bg-white p-3 rounded-3">
                                            <p class="mb-0" style="white-space: pre-wrap;">@appeal.AppealExplanation</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Courses Section -->
                            <div class="col-md-6">
                                <div class="card border-0 bg-light rounded-3 h-100">
                                    <div class="card-body">
                                        <h4 class="fs-5 mb-3 d-flex align-items-center">
                                            <i class="oi oi-list me-2 text-primary"></i> @appeal.Semester1Label Courses
                                        </h4>
                                        @if (appeal.Semester1Courses.Count == 0)
                                        {
                                            <div class="alert alert-light mb-0">No courses added for Semester 1.</div>
                                        }
                                        else
                                        {
                                            <div class="table-responsive">
                                                <table class="table table-sm table-hover bg-white rounded-3 overflow-hidden">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th>Course</th>
                                                            <th>Number</th>
                                                            <th>Hours</th>
                                                            <th class="text-center">Repeat</th>
                                                            <th class="text-center">Required</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var course in appeal.Semester1Courses)
                                                        {
                                                            <tr>
                                                                <td>@course.CourseName</td>
                                                                <td>@course.CourseNumber</td>
                                                                <td>@course.CreditHours</td>
                                                                <td class="text-center">
                                                                    @if (course.IsRepeat)
                                                                    {
                                                                        <i class="oi oi-check text-success"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="oi oi-x text-danger"></i>
                                                                    }
                                                                </td>
                                                                <td class="text-center">
                                                                    @if (course.IsRequiredForMajor)
                                                                    {
                                                                        <i class="oi oi-check text-success"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="oi oi-x text-danger"></i>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-6">
                                <div class="card border-0 bg-light rounded-3 h-100">
                                    <div class="card-body">
                                        <h4 class="fs-5 mb-3 d-flex align-items-center">
                                            <i class="oi oi-list me-2 text-primary"></i> @appeal.Semester2Label Courses
                                        </h4>
                                        @if (appeal.Semester2Courses.Count == 0)
                                        {
                                            <div class="alert alert-light mb-0">No courses added for Semester 2.</div>
                                        }
                                        else
                                        {
                                            <div class="table-responsive">
                                                <table class="table table-sm table-hover bg-white rounded-3 overflow-hidden">
                                                    <thead class="table-light">
                                                        <tr>
                                                            <th>Course</th>
                                                            <th>Number</th>
                                                            <th>Hours</th>
                                                            <th class="text-center">Repeat</th>
                                                            <th class="text-center">Required</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var course in appeal.Semester2Courses)
                                                        {
                                                            <tr>
                                                                <td>@course.CourseName</td>
                                                                <td>@course.CourseNumber</td>
                                                                <td>@course.CreditHours</td>
                                                                <td class="text-center">
                                                                    @if (course.IsRepeat)
                                                                    {
                                                                        <i class="oi oi-check text-success"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="oi oi-x text-danger"></i>
                                                                    }
                                                                </td>
                                                                <td class="text-center">
                                                                    @if (course.IsRequiredForMajor)
                                                                    {
                                                                        <i class="oi oi-check text-success"></i>
                                                                    }
                                                                    else
                                                                    {
                                                                        <i class="oi oi-x text-danger"></i>
                                                                    }
                                                                </td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Acknowledgements Card -->
                            <div class="col-12">
                                <div class="card border-0 bg-light rounded-3">
                                    <div class="card-body">
                                        <h4 class="fs-5 mb-3 d-flex align-items-center">
                                            <i class="oi oi-check me-2 text-primary"></i> Acknowledgements
                                        </h4>
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="d-flex align-items-center p-3 bg-white rounded-3 mb-3 mb-md-0">
                                                    <div class="me-3">
                                                        @if (appeal.AcknowledgementPayment)
                                                        {
                                                            <span class="badge bg-success rounded-circle p-2">
                                                                <i class="oi oi-check"></i>
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger rounded-circle p-2">
                                                                <i class="oi oi-x"></i>
                                                            </span>
                                                        }
                                                    </div>
                                                    <div>
                                                        <h5 class="mb-0 fs-6">Payment Acknowledgement</h5>
                                                        <small class="text-muted">@(appeal.AcknowledgementPayment ? "Acknowledged" : "Not Acknowledged")</small>
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="d-flex align-items-center p-3 bg-white rounded-3">
                                                    <div class="me-3">
                                                        @if (appeal.AcknowledgementFinal)
                                                        {
                                                            <span class="badge bg-success rounded-circle p-2">
                                                                <i class="oi oi-check"></i>
                                                            </span>
                                                        }
                                                        else
                                                        {
                                                            <span class="badge bg-danger rounded-circle p-2">
                                                                <i class="oi oi-x"></i>
                                                            </span>
                                                        }
                                                    </div>
                                                    <div>
                                                        <h5 class="mb-0 fs-6">Final Acknowledgement</h5>
                                                        <small class="text-muted">@(appeal.AcknowledgementFinal ? "Acknowledged" : "Not Acknowledged")</small>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <div class="col-12">
                                                            <div class="card border-0 bg-light rounded-3">
                                                                <div class="card-body">
                                                                    <h4 class="fs-5 mb-3 d-flex align-items-center">
                                                                        <i class="oi oi-folder me-2 text-primary"></i> Uploaded Documents
                                                                    </h4>
                                                                    @if (appeal.UploadedFiles == null || !appeal.UploadedFiles.Any())
                                                                    {
                                                                        <div class="alert alert-light mb-0">No documents were uploaded with this appeal.</div>
                                                                    }
                                                                    else
                                                                    {
                                                                        <ul class="list-group list-group-flush bg-white rounded-3">
                                                                            @foreach (var fileInfo in appeal.UploadedFiles)
                                                                            {
                                                                                <li class="list-group-item d-flex justify-content-between align-items-center px-3 py-2">
                                                                                    <span>
                                                                                        <i class="oi oi-document me-2 text-muted"></i>
                                                                                        @fileInfo.OriginalFileName
                                                                                    </span>
                                                                                    <a href="@GetDownloadUrl(fileInfo.FileId)" target="_blank" class="btn btn-sm btn-outline-primary rounded-pill px-3">
                                                                                        <i class="oi oi-data-transfer-download me-1"></i> Download
                                                                                    </a>
                                                                                    @* Alternative: Button triggering a method - useful if more complex logic is needed later
                                                                                    <button class="btn btn-sm btn-outline-primary rounded-pill px-3" @onclick="() => DownloadFile(fileInfo.FileId)">
                                                                                        <i class="oi oi-data-transfer-download me-1"></i> Download
                                                                                    </button>
                                                                                    *@
                                                                                </li>
                                                                            }
                                                                        </ul>
                                                                    }
                                                                </div>
                                                            </div>
                                                        </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Right column - Admin Actions -->
            <div class="col-lg-4">
                <!-- Status Update Card -->
                <div class="card shadow-sm rounded-3 mb-4 border-0">
                    <div class="card-header bg-white py-3">
                        <h4 class="mb-0 fs-5">Update Status</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="statusSelect" class="form-label small text-muted">Appeal Status</label>
                            <select id="statusSelect" class="form-select rounded-pill" @bind="newStatus">
                                <option value="Pending">Pending</option>
                                <option value="Approved">Approved</option>
                                <option value="Rejected">Rejected</option>
                                <option value="More Information Needed">More Information Needed</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="statusComment" class="form-label small text-muted">Status Comment</label>
                            <textarea id="statusComment" class="form-control rounded-3" rows="3" @bind="newComment" placeholder="Add a comment about this status change"></textarea>
                        </div>
                        <button class="btn btn-primary rounded-pill w-100" @onclick="UpdateAppealStatus" disabled="@(isSaving)">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <i class="oi oi-pencil me-1"></i> <span>Update Status</span>
                            }
                        </button>
                    </div>
                </div>

                <!-- Add Comment Card -->
                <div class="card shadow-sm rounded-3 mb-4 border-0">
                    <div class="card-header bg-white py-3">
                        <h4 class="mb-0 fs-5">Add Comment</h4>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="generalComment" class="form-label small text-muted">Comment</label>
                            <textarea id="generalComment" class="form-control rounded-3" rows="3" @bind="newGeneralComment" placeholder="Add a general comment about this appeal"></textarea>
                        </div>
                        <button class="btn btn-outline-primary rounded-pill w-100" @onclick="AddGeneralComment" disabled="@(isSaving)">
                            @if (isSaving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <i class="oi oi-comment-square me-1"></i> <span>Add Comment</span>
                            }
                        </button>
                    </div>
                </div>

                <!-- Comments Timeline Card -->
                <div class="card shadow-sm rounded-3 mb-4 border-0">
                    <div class="card-header bg-white py-3">
                        <h4 class="mb-0 fs-5">Comments Timeline</h4>
                    </div>
                    <div class="card-body px-0 py-0">
                        @if (appeal.Comments == null || appeal.Comments.Count == 0)
                        {
                            <div class="p-4 text-center text-muted">
                                <i class="oi oi-comment-square d-block mb-2" style="font-size: 24px;"></i>
                                <p class="mb-0">No comments have been added to this appeal.</p>
                            </div>
                        }
                        else
                        {
                            <div class="timeline p-3">
                                @foreach (var comment in appeal.Comments.OrderByDescending(c => c.Timestamp))
                                {
                                    <div class="timeline-item mb-4">
                                        <div class="timeline-item-header d-flex align-items-center mb-2">
                                            <div class="timeline-icon me-2">
                                                @if (!string.IsNullOrEmpty(comment.Status))
                                                {
                                                    <span class="badge @GetStatusBadgeClass(comment.Status) rounded-circle p-2">
                                                        <i class="oi oi-pencil"></i>
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary rounded-circle p-2">
                                                        <i class="oi oi-comment-square"></i>
                                                    </span>
                                                }
                                            </div>
                                            <div class="flex-grow-1">
                                                <h5 class="mb-0 fs-6">
                                                    @if (!string.IsNullOrEmpty(comment.Status))
                                                    {
                                                        <span>Status: <span class="badge @GetStatusBadgeClass(comment.Status) rounded-pill">@comment.Status</span></span>
                                                    }
                                                    else
                                                    {
                                                        <span>General Comment</span>
                                                    }
                                                </h5>
                                                <small class="text-muted">@comment.Timestamp.ToLocalTime().ToString("MMM dd, yyyy h:mm tt")</small>
                                            </div>
                                        </div>
                                        <div class="timeline-item-body ms-4 ps-2 border-start border-light">
                                            <div class="p-3 bg-light rounded-3">
                                                <p class="mb-2">@comment.Text</p>
                                                <small class="text-muted">By: @comment.AdminName</small>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public string AppealId { get; set; } = ""; // Initialize to avoid potential null issues

    // --- State Variables ---
    private AppealForm? appeal; // The loaded appeal data (nullable)
    private bool loading = true; // Tracks initial loading state
    private bool isSaving = false; // Tracks state during save operations (status/comment)

    // --- Input Model Properties for Admin Actions ---
    private string newStatus = ""; // Bound to the status dropdown
    private string newComment = ""; // Bound to the status comment textarea
    private string newGeneralComment = ""; // Bound to the general comment textarea

    // --- Lifecycle Methods ---

    protected override async Task OnInitializedAsync()
    {
        // Base initialization if needed
        await base.OnInitializedAsync();
        // Loading is triggered by OnParametersSetAsync
    }

    protected override async Task OnParametersSetAsync()
    {
        // This method runs when parameters are set, including the initial load
        // and when navigating between different appeal IDs on the same component instance.
        await LoadAppeal();
    }

    // --- Data Loading ---

    private async Task LoadAppeal()
    {
        // Check if the AppealId parameter is valid
        if (string.IsNullOrEmpty(AppealId))
        {
            appeal = null; // Ensure appeal is null if ID is missing
            loading = false;
            StateHasChanged(); // Update UI
            return;
        }

        try
        {
            loading = true;
            StateHasChanged(); // Show loading indicator immediately

            // Create a DbContext instance using the factory
            await using var context = await ContextFactory.CreateDbContextAsync();

            // Fetch the specific appeal by ID from the database.
            // IMPORTANT: If UploadedFiles, Comments, Courses are separate related entities
            // (e.g., in SQL Server), you MUST use .Include() here.
            // If they are embedded within the AppealForm document (common in Cosmos DB),
            // .Include() is not needed. Adjust based on your database structure.
            appeal = await context.Appeals
                // Examples (Uncomment if using relational DB with separate tables):
                // .Include(a => a.UploadedFiles)
                // .Include(a => a.Comments)
                // .Include(a => a.Semester1Courses)
                // .Include(a => a.Semester2Courses)
                .FirstOrDefaultAsync(a => a.Id == AppealId);

            // --- Post-Load Processing ---
            if (appeal != null)
            {
                // Initialize the status dropdown. Only set it from appeal.Status
                // if it hasn't been manually changed by the admin yet OR if the appeal changed.
                // This prevents resetting the dropdown if the user selects a status then adds a comment.
                 if (string.IsNullOrEmpty(newStatus) || newStatus != appeal.Status)
                 {
                    newStatus = appeal.Status ?? "Pending"; // Default to Pending if null
                 }

                 // Sort comments descending by timestamp for display
                 appeal.Comments = appeal.Comments.OrderByDescending(c => c.Timestamp).ToList();
            }
            else
            {
                // Appeal with the given ID was not found
                Console.WriteLine($"Appeal with ID {AppealId} not found in the database.");
                 newStatus = "Pending"; // Reset status dropdown if appeal not found
            }
        }
        catch (Exception ex)
        {
            // Log any errors during data fetching
            Console.WriteLine($"Error loading appeal details for ID {AppealId}: {ex.Message}");
            appeal = null; // Ensure appeal is null on error
        }
        finally
        {
            // Loading is complete, whether successful or not
            loading = false;
            StateHasChanged(); // Update the UI to show content or 'not found' message
        }
    }

    // --- Admin Actions ---

    private async Task UpdateAppealStatus()
    {
        // Prevent action if appeal data isn't loaded or status is invalid
        if (appeal == null || string.IsNullOrWhiteSpace(newStatus))
        {
            Console.WriteLine("Update status cancelled: Appeal not loaded or status is empty.");
            return;
        }

        isSaving = true;
        StateHasChanged(); // Show saving indicator

        try
        {
            await using var context = await ContextFactory.CreateDbContextAsync();

            // Fetch the entity again within this context for tracking changes
            var appealToUpdate = await context.Appeals.FirstOrDefaultAsync(a => a.Id == AppealId);

            if (appealToUpdate != null)
            {
                // Update the status
                appealToUpdate.Status = newStatus;

                // Add a comment associated with this status change if provided
                if (!string.IsNullOrWhiteSpace(newComment))
                {
                    // Ensure the Comments collection exists
                    appealToUpdate.Comments ??= new List<AppealComment>();

                    var comment = new AppealComment
                    {
                        Id = Guid.NewGuid().ToString(), // Generate a unique ID for the comment
                        Text = newComment.Trim(),
                        Status = newStatus, // Link comment to this status change
                        Timestamp = DateTime.UtcNow,
                        AdminId = "admin_placeholder_id", // Get from AuthenticationStateProvider or HttpContext.User
                        AdminName = "Admin User"          // Get from AuthenticationStateProvider or HttpContext.User
                    };
                    appealToUpdate.Comments.Add(comment);
                    Console.WriteLine($"Added status comment for appeal {AppealId}.");
                }

                // Save changes to the database
                await context.SaveChangesAsync();
                Console.WriteLine($"Successfully updated status for appeal {AppealId} to {newStatus}.");

                // Refresh the appeal data on the page to show the update
                await LoadAppeal();

                // Clear the comment input field after successful submission
                newComment = "";
            }
            else
            {
                 Console.WriteLine($"Update status failed: Appeal {AppealId} not found during update.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating appeal status for ID {AppealId}: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged(); // Hide saving indicator and update UI
        }
    }

    private async Task AddGeneralComment()
    {
        // Prevent action if appeal data isn't loaded or comment is empty
        if (appeal == null || string.IsNullOrWhiteSpace(newGeneralComment))
        {
             Console.WriteLine("Add comment cancelled: Appeal not loaded or comment is empty.");
            return;
        }

        isSaving = true;
        StateHasChanged(); // Show saving indicator

        try
        {
            await using var context = await ContextFactory.CreateDbContextAsync();
            // Fetch the entity again for tracking
            var appealToUpdate = await context.Appeals.FirstOrDefaultAsync(a => a.Id == AppealId);

            if (appealToUpdate != null)
            {
                // Ensure the Comments collection exists
                appealToUpdate.Comments ??= new List<AppealComment>();

                var comment = new AppealComment
                {
                    Id = Guid.NewGuid().ToString(),
                    Text = newGeneralComment.Trim(),
                    Status = null, // Indicate this is a general comment, not tied to a status change
                    Timestamp = DateTime.UtcNow,
                    AdminId = "admin_placeholder_id",
                    AdminName = "Admin User"
                };
                appealToUpdate.Comments.Add(comment);
                Console.WriteLine($"Added general comment for appeal {AppealId}.");

                await context.SaveChangesAsync();
                Console.WriteLine($"Successfully saved general comment for appeal {AppealId}.");


                // Refresh data to show the new comment
                await LoadAppeal();

                // Clear the input field
                newGeneralComment = "";
            }
             else
            {
                 Console.WriteLine($"Add comment failed: Appeal {AppealId} not found during update.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding general comment for ID {AppealId}: {ex.Message}");
        }
        finally
        {
            isSaving = false;
            StateHasChanged(); // Hide saving indicator and update UI
        }
    }

    // --- Navigation & Helpers ---

    private void GoBack()
    {
        // Navigate back to the main admin page or previous page
        NavManager.NavigateTo("/admin");
    }

    // Helper method to generate the download URL for the API endpoint
    private string GetDownloadUrl(string fileId)
    {
        // Ensure fileId is properly encoded to be part of a URL path segment
        // System.Net.WebUtility is generally preferred for path encoding over HttpUtility
        var encodedFileId = System.Net.WebUtility.UrlEncode(fileId);

        // Construct the relative URL pointing to your DownloadController action
        return $"api/download/{encodedFileId}";
    }

    // Helper method to determine the CSS class for status badges
    private string GetStatusBadgeClass(string? status) // Allow nullable status
    {
        return status switch // Using switch expression for conciseness
        {
            "Approved" => "bg-success",
            "Rejected" => "bg-danger",
            "Pending" => "bg-warning text-dark", // Added text-dark for better readability on yellow
            "More Information Needed" => "bg-info text-dark", // Added text-dark for better readability on light blue
            _ => "bg-secondary" // Default for null or unexpected statuses
        };
    }
    private string GetAdvisorStatusDotClass(string status)
    {
        return status switch
        {
            "Approved" => "bg-approved",
            "Rejected" => "bg-rejected",
            "Pending" => "bg-pending",
            _ => "bg-secondary" // fallback if somehow invalid status
        };
    }

}

<style>
    /* Custom CSS for the timeline */
    .timeline {
        position: relative;
    }
    
    .timeline-item {
        position: relative;
    }
    
    .timeline-icon {
        min-width: 32px;
    }
    .status-dot {
        width: 12px;
        height: 12px;
        border-radius: 50%;
        display: inline-block;
    }

    .bg-approved {
        background-color: #28a745; /* Bootstrap green */
    }

    .bg-rejected {
        background-color: #dc3545; /* Bootstrap red */
    }

    .bg-pending {
        background-color: #ffc107; /* Bootstrap yellow */
    }
</style>