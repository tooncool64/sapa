@page "/admin"
@inject NavigationManager NavManager
<!--- "at"attribute [Authorize(Roles = "Admin")] --->

<PageTitle>Admin Dashboard</PageTitle>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="Admin.css"/>
</head>
<body>
<header>
    <div class="logo">
        <h1>Admin Dashboard</h1>
    </div>
</header>
<div class="container">
    <nav class="sidebar">
        <ul>
            <li class="active"><a href="#" onclick="event.preventDefault(); showSection('dashboard')">Dashboard</a></li>
            <li><a href="#" onclick="event.preventDefault(); showSection('options')">Options</a></li>
        </ul>
    </nav>
    <main class="main-content">
        <section id="dashboard" class="section active">
            <h1>Dashboard</h1>
            <AppealCardInfo></AppealCardInfo>
            <AppealsDashboard
                OnAppealSelected="ViewAppealDetails" />
            
            @code {
                private void ViewAppealDetails(string appealId)
                {
                    NavManager.NavigateTo($"/admin/appeals/{appealId}");
                }
            }
        </section>

        <section id="options" class="section">
            <AppealSystemConfiguration></AppealSystemConfiguration>
            </section>
    </main>
</div>

<script>
        // Show section function
        function showSection(sectionId) {
            // Hide all sections
            var sections = document.getElementsByClassName('section');
            for (var i = 0; i < sections.length; i++) {
                sections[i].classList.remove('active');
            }
            
            // Show selected section
            document.getElementById(sectionId).classList.add('active');
            
            // Update active menu item
            var menuItems = document.querySelectorAll('.sidebar ul li');
            for (var i = 0; i < menuItems.length; i++) {
                menuItems[i].classList.remove('active');
            }
            
            var activeMenuItem = document.querySelector(`.sidebar ul li a[onclick="showSection('${sectionId}')"]`).parentNode;
            activeMenuItem.classList.add('active');
        }
        
        // Accordion functionality
        var acc = document.getElementsByClassName('accordion');
        for (var i = 0; i < acc.length; i++) {
            acc[i].addEventListener('click', function() {
                this.classList.toggle('active');
                var panel = this.nextElementSibling;
                if (panel.style.display === 'block') {
                    panel.style.display = 'none';
                } else {
                    panel.style.display = 'block';
                }
            });
        }

        // toggle appeal
        async function toggleAppealStatus(button) {
            const row = button.closest("tr");
            const statusSpan = row.querySelector(".status-label");
            const currentStatus = row.getAttribute("data-status");
            const appealId = row.getAttribute("data-id");

            const newStatus = currentStatus === "Pending" ? "Closed" : "Pending";

            // Update UI 
            statusSpan.innerText = newStatus;
            statusSpan.style.color = newStatus === "Closed" ? "red" : "black";
            button.innerText = newStatus === "Closed" ? "Reopen" : "Close";
            button.classList.toggle("reopen-btn", newStatus === "Closed");
            row.setAttribute("data-status", newStatus);

            // Send to backend
            try {
                const response = await fetch(`/api/appeal/${appealId}/status`, {
                    method: "PATCH",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({ status: newStatus })
                });

                if (!response.ok) {
                    throw new Error("Failed to update appeal status");
                }
            } catch (err) {
                alert("Error saving status. Try again.");
                console.error(err);
            }

            filterAppealsByStatus(); // Optional: refresh the filtered view
        }
    //filter by open or close
    function filterAppealsByStatus() {
        const selected = document.getElementById("filterStatus").value;
        const rows = document.querySelectorAll("tbody tr");

        rows.forEach(row => {
            const status = row.getAttribute("data-status");
            row.style.display = (selected === "All" || selected === status) ? "" : "none";
        });
    }
    </script>
</body>